name: CI Workflow

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  POETRY_PATH: /home/runner/.local/bin/poetry
  PYTHON_VERSION: "3.13.1"
  MODULE_NAME: pythonproject

jobs:
  lint:
    runs-on: ubuntu-24.04

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "${{ env.PYTHON_VERSION }}"

      - name: Install Poetry
        run: |
          curl -sSL https://install.python-poetry.org | python3 -
          ${{ env.POETRY_PATH }} --version

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/pip
            ~/.local/share/pypoetry
          key: ${{ runner.os }}-poetry-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            ${{ runner.os }}-poetry-

      - name: Install dependencies
        run: |
          ${{ env.POETRY_PATH }} install

      - name: Run mypy
        run: ${{ env.POETRY_PATH }} run mypy ${{ env.MODULE_NAME }} tests

      - name: Run flake8
        run: ${{ env.POETRY_PATH }} run flake8 ${{ env.MODULE_NAME }} tests

      - name: Run black (check mode)
        run: ${{ env.POETRY_PATH }} run black --check ${{ env.MODULE_NAME }} tests

  test:
    runs-on: ubuntu-24.04

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "${{ env.PYTHON_VERSION }}"

      - name: Install Poetry
        run: |
          curl -sSL https://install.python-poetry.org | python3 -
          ${{ env.POETRY_PATH }} --version

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/pip
            ~/.local/share/pypoetry
          key: ${{ runner.os }}-poetry-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            ${{ runner.os }}-poetry-

      - name: Install dependencies
        run: |
          ${{ env.POETRY_PATH }} install

      - name: Run pytest
        run: ${{ env.POETRY_PATH }} run pytest

      - name: Archive code coverage results
        uses: actions/upload-artifact@v4
        with:
          name: code-coverage-report
          path: coverage.xml

  sonarqube:
    needs: test
    runs-on: ubuntu-24.04

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download a single artifact
        uses: actions/download-artifact@v4
        with:
          name: code-coverage-report

      - name: SonarQube Scan
        uses: SonarSource/sonarqube-scan-action@v4
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
